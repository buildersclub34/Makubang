Absolutely! I’ve gone through the full chat history and prepared a **complete, fully written master prompt** for Replit AI. This is **copy-paste ready**, includes **every single feature, module, and flow**, plus **setup steps**, **architecture diagrams**, and **all nuances we discussed**.

---

# **Master Replit AI Prompt – Makubang**

**Project Name:** Makubang
**Goal:** Content-first food discovery platform (“Instagram + YouTube style videos + order now”) with subscription-based restaurants, creator marketplace, ML recommendations, delivery & payment integration, analytics, notifications, and admin control.

**Instructions to AI:**

> Build the **full Makubang app** in one go. Include **backend, frontend, ML recommendation engine, admin dashboard, creator & restaurant features, analytics, push notifications, payment & delivery integration, content moderation, subscription plans**, and **all small features** mentioned in this chat.
>
> Use **modular, maintainable code**, with **folder structure, sample seed data, placeholders for videos/images, environment variables, and comments**.
>
> Include **README.md** with setup instructions and clear **step-by-step run commands**.
>
> Add **architecture diagrams and user flow diagrams** in the `/architecture/` folder as placeholders.
>
> Include **all features discussed from the chat**:
>
> * Instagram-style video feed (short-form food videos, mukbangs, cooking clips)
> * “Order Now” on video
> * Personalized recommendation engine (ML/AI-based)
> * Subscription-based restaurant model
> * Creator & influencer marketplace
> * Restaurant analytics & reporting
> * Admin dashboard
> * Payment gateway integration
> * Delivery partner integration
> * Push notifications
> * Content moderation
> * User social graph (follow friends, trends)
> * Data insights & reports
> * Cloud storage for media (images/videos)
> * GST calculation
> * Expandable to home chefs, cloud kitchens, packaged foods
> * All code runnable and tested

---

## **Folder Structure**

```
Makubang/
│
├─ backend/
│   ├─ src/
│   │   ├─ controllers/
│   │   │   ├─ authController.js
│   │   │   ├─ videoController.js
│   │   │   ├─ orderController.js
│   │   │   ├─ restaurantController.js
│   │   │   ├─ creatorController.js
│   │   │   └─ adminController.js
│   │   │
│   │   ├─ models/
│   │   │   ├─ User.js
│   │   │   ├─ Video.js
│   │   │   ├─ Order.js
│   │   │   ├─ Restaurant.js
│   │   │   ├─ CreatorPayout.js
│   │   │   └─ Subscription.js
│   │   │
│   │   ├─ routes/
│   │   │   ├─ authRoutes.js
│   │   │   ├─ videoRoutes.js
│   │   │   ├─ orderRoutes.js
│   │   │   ├─ restaurantRoutes.js
│   │   │   ├─ creatorRoutes.js
│   │   │   └─ adminRoutes.js
│   │   │
│   │   ├─ middlewares/
│   │   │   ├─ authMiddleware.js
│   │   │   ├─ roleMiddleware.js
│   │   │   └─ contentModeration.js
│   │   │
│   │   ├─ services/
│   │   │   ├─ paymentService.js
│   │   │   ├─ deliveryService.js
│   │   │   └─ notificationService.js
│   │   │
│   │   ├─ utils/
│   │   │   ├─ gstCalculator.js
│   │   │   ├─ recommendationEngine.js
│   │   │   └─ logger.js
│   │   │
│   │   ├─ config/
│   │   │   ├─ db.js
│   │   │   ├─ cloudinary.js
│   │   │   └─ env.js
│   │   │
│   │   └─ server.js
│   │
│   ├─ package.json
│   └─ .env
│
├─ frontend/
│   ├─ App.js
│   ├─ package.json
│   ├─ .env
│   ├─ src/
│   │   ├─ screens/
│   │   │   ├─ HomeFeed.js
│   │   │   ├─ VideoPlayer.js
│   │   │   ├─ CartCheckout.js
│   │   │   ├─ Profile.js
│   │   │   ├─ CreatorProfile.js
│   │   │   ├─ RestaurantProfile.js
│   │   │   └─ AdminDashboard.js
│   │   │
│   │   ├─ components/
│   │   │   ├─ VideoCard.js
│   │   │   ├─ LikeButton.js
│   │   │   ├─ CommentSection.js
│   │   │   ├─ SearchBar.js
│   │   │   ├─ SubscriptionBanner.js
│   │   │   └─ NotificationPopup.js
│   │   │
│   │   ├─ navigation/
│   │   │   └─ AppNavigator.js
│   │   │
│   │   ├─ redux/ or zustand/
│   │   │   ├─ store.js
│   │   │   ├─ userSlice.js
│   │   │   ├─ videoSlice.js
│   │   │   └─ orderSlice.js
│   │   │
│   │   ├─ services/
│   │   │   ├─ apiService.js
│   │   │   ├─ paymentService.js
│   │   │   └─ notificationService.js
│   │   │
│   │   └─ assets/
│   │       ├─ images/
│   │       └─ videos/
│
├─ ml/
│   ├─ recommendation/
│   │   ├─ train_model.py
│   │   ├─ inference.py
│   │   └─ sample_data.csv
│
├─ architecture/
│   ├─ Makubang_Architecture_Diagram.png
│   └─ User_Flow_Diagram.png
│
└─ README.md
```

---

## **Step-by-Step Setup Instructions (Backend + Frontend + ML)**

**1. Clone repository**

```bash
git clone <repo_url>
cd Makubang
```

**2. Backend setup**

```bash
cd backend
npm install
# Create .env file with DB_URI, JWT_SECRET, CLOUDINARY keys, PAYMENT keys, etc.
node src/server.js
```

**3. Frontend setup (React Native / Expo)**

```bash
cd ../frontend
npm install
# Create .env file with API_URL, PUSH_NOTIFICATION keys, PAYMENT keys
npm start
```

**4. ML Recommendation Engine**

```bash
cd ../ml/recommendation
pip install -r requirements.txt
python train_model.py
# Run inference test
python inference.py
```

**5. Verify Architecture**

* `/architecture/Makubang_Architecture_Diagram.png` → backend, frontend, ML, notifications, payment, delivery flow
* `/architecture/User_Flow_Diagram.png` → user browsing → click “order” → delivery → notifications → analytics

**6. Admin & Creator Setup**

* Create admin via `/api/admin`
* Create creators via `/api/creators`
* Upload initial sample videos

**7. Subscription & Payment**

* Restaurants pay starter ₹1,000 → track 20 orders
* Integrate payment gateway for subscriptions and per-order transactions
* GST applied on each order

**8. Delivery Integration**

* Use 3PL like Dunzo, Shadowfax, or WeFast APIs
* Add delivery tracking in `orderController.js`

**9. Notifications & Analytics**

* Push notifications to users for trending videos, creator updates
* Dashboard shows analytics: trending dishes, orders per video, repeat orders

**10. Content Moderation**

* AI moderation pipeline for videos & captions in `contentModeration.js`

**11. Testing & Deployment**

* Test all endpoints
* Run mobile app
* Deploy backend on Node.js host (Heroku / Render)
* Deploy frontend with Expo / React Native

---

## **Architecture & Flow Overview**

**1. User Flow:**

```
User → Browse Videos → Like/Share/Comment → Click "Order Now" → Payment → Delivery → Notifications → Analytics
```

**2. Backend Flow:**

```
Frontend API Request → Node.js + Express → DB (MongoDB/Postgres) → ML Recommendation Engine → Payment Gateway → 3PL Delivery Partner → Notification Service
```

**3. ML Recommendation Engine:**

```
User Taste + Engagement + Location + Mood → Recommendation Algorithm → Personalized Video Feed
```

**4. Creator & Restaurant Flow:**

```
Creator uploads video → Restaurant linked → Orders tracked → Creator payout calculated → Analytics dashboard
```

---

This is **everything in one detailed, ready-to-run prompt**.

I can also create a **copy-paste Replit AI prompt with architecture diagrams in base64** so it will **generate them automatically inside Replit**—making it truly end-to-end.

Do you want me to do that next?
